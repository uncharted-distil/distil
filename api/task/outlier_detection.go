//
//   Copyright Â© 2019 Uncharted Software Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package task

import (
	"path"

	"github.com/uncharted-distil/distil-compute/metadata"
	"github.com/uncharted-distil/distil-compute/model"
	"github.com/uncharted-distil/distil-compute/primitive/compute"
	"github.com/uncharted-distil/distil-compute/primitive/compute/description"
	"github.com/uncharted-distil/distil-compute/primitive/compute/result"

	"github.com/uncharted-distil/distil/api/env"
	api "github.com/uncharted-distil/distil/api/model"
)

// OutlierPoint contains whether or not a datapoint is an outlier or not
type OutlierPoint struct {
	D3MIndex string
	Label    string
}

// OutlierDetection finds outliers in either tabular or remote sensing data
func OutlierDetection(dataset *api.Dataset, variable string) ([]*OutlierPoint, error) {
	datasetInputDir := env.ResolvePath(dataset.Source, dataset.Folder)
	features := dataset.Variables

	// find the particular clustering variable - relevant for images and remote sensing tile sets, not
	// needed for full set clustering
	var imageVar *model.Variable
	for _, v := range features {
		if v.Key == variable {
			imageVar = v
		}
	}

	var step *description.FullySpecifiedPipeline
	var err error
	group := getGroup(imageVar.Key, features)
	if model.IsImage(imageVar.Type) {
		step, err = description.CreateImageOutlierDetectionPipeline("image_outlier_detection", "normal image outlier detection", []*model.Variable{imageVar})
	} else if group != nil && model.IsMultiBandImage(group.GetType()) {
		var envConfig env.Config
		envConfig, err = env.LoadConfig()
		if err == nil {
			if dataset.LearningDataset != "" {
				// get the pre-featurized dataset location and its metadata
				datasetInputDir = dataset.LearningDataset
				var meta *model.Metadata
				meta, err = metadata.LoadMetadataFromOriginalSchema(path.Join(datasetInputDir, compute.D3MDataSchema), false)
				if err == nil {
					// the pre-featurized dataset does not have remote sensing image file names - they have instead been replaced
					// with 2048 columns of float values generated by the pre-featurization step.  We need to use this variable list
					// for clustering.
					variables := meta.GetMainDataResource().Variables
					step, err = description.CreateMultiBandImageOutlierDetectionPipeline(
						"remote_sensing_outlier_detection", "isolation forest pre-featurized remote sensing outlier detection anomaly", variables,
						true, envConfig.PoolFeatures, nil, envConfig.RemoteSensingGPUBatchSize, envConfig.RemoteSensingNumJobs)
				}
			} else {
				rsg := group.(*model.MultiBandImageGrouping)
				step, err = description.CreateMultiBandImageOutlierDetectionPipeline("remote_sensing_cluster", "multiband image clustering",
					features, false, envConfig.PoolFeatures, rsg, envConfig.RemoteSensingGPUBatchSize, envConfig.RemoteSensingNumJobs)
			}
		}
	} else {
		// tabular/general outlier detection pipeline
		selectedFeatures := make([]string, len(features))
		for i, f := range features {
			selectedFeatures[i] = f.Key
		}
		datasetDescription := &description.UserDatasetDescription{
			AllFeatures:      features,
			TargetFeature:    imageVar,
			SelectedFeatures: selectedFeatures,
		}
		step, err = description.CreateTabularOutlierDetectionPipeline("tabular_outlier_detection",
			"isolation forest tabular outlier detection anomaly", datasetDescription, nil)
	}

	if err != nil {
		return nil, err
	}

	datasetURI, err := submitPipeline([]string{datasetInputDir}, step, true)
	if err != nil {
		return nil, err
	}

	res, err := result.ParseResultCSV(datasetURI)
	if err != nil {
		return nil, err
	}

	header, err := castTypeArray(res[0])
	if err != nil {
		return nil, err
	}

	outlierLabelIndex := getFieldIndex(header, "outlier_label")
	if outlierLabelIndex == -1 {
		// cluster label may be returned with target name
		outlierLabelIndex = getFieldIndex(header, variable)
	}
	d3mIndex := getFieldIndex(header, model.D3MIndexName)
	if outlierLabelIndex == -1 && len(header) == 2 {
		// default to second column
		outlierLabelIndex = (d3mIndex + 1) % 2
	}

	outlierData := make([]*OutlierPoint, len(res)-1)
	for i, v := range res[1:] {
		label := createFriendlyOutlierLabel(v[outlierLabelIndex].(string))

		outlierData[i] = &OutlierPoint{
			D3MIndex: v[d3mIndex].(string),
			Label:    label,
		}
	}

	return outlierData, nil
}

func getGroup(imageVar string, features []*model.Variable) model.BaseGrouping {
	for _, feature := range features {
		if feature.IsGrouping() && feature.Grouping.GetIDCol() == imageVar {
			return feature.Grouping
		}
	}
	return nil
}
